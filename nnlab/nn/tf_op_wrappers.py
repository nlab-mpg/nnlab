
#
# This file is automatically generated. Do not modify the codes here.
#

from tensorflow.python.ops import standard_ops, nn_ops
from . import functional as F


def abs(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.abs(*args, **kwargs)
    return F.tensor_from_tf(result)

def accumulate_n(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.accumulate_n(*args, **kwargs)
    return F.tensor_from_tf(result)

def acos(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.acos(*args, **kwargs)
    return F.tensor_from_tf(result)

def acosh(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.acosh(*args, **kwargs)
    return F.tensor_from_tf(result)

def add(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.add(*args, **kwargs)
    return F.tensor_from_tf(result)

def add_check_numerics_ops(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.add_check_numerics_ops(*args, **kwargs)
    return F.tensor_from_tf(result)

def add_n(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.add_n(*args, **kwargs)
    return F.tensor_from_tf(result)

def all_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.all_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def angle(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.angle(*args, **kwargs)
    return F.tensor_from_tf(result)

def arg_max(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.arg_max(*args, **kwargs)
    return F.tensor_from_tf(result)

def arg_min(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.arg_min(*args, **kwargs)
    return F.tensor_from_tf(result)

def argmax(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.argmax(*args, **kwargs)
    return F.tensor_from_tf(result)

def argmin(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.argmin(*args, **kwargs)
    return F.tensor_from_tf(result)

def as_string(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.as_string(*args, **kwargs)
    return F.tensor_from_tf(result)

def asin(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.asin(*args, **kwargs)
    return F.tensor_from_tf(result)

def asinh(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.asinh(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_greater(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_greater(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_greater_equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_greater_equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_integer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_integer(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_less(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_less(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_less_equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_less_equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_negative(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_negative(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_non_negative(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_non_negative(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_non_positive(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_non_positive(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_none_equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_none_equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_positive(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_positive(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_proper_iterable(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_proper_iterable(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_rank(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_rank(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_rank_at_least(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_rank_at_least(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_rank_in(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_rank_in(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_same_float_dtype(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_same_float_dtype(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_scalar(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_scalar(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_type(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_type(*args, **kwargs)
    return F.tensor_from_tf(result)

def assert_variables_initialized(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assert_variables_initialized(*args, **kwargs)
    return F.tensor_from_tf(result)

def assign(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assign(*args, **kwargs)
    return F.tensor_from_tf(result)

def assign_add(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assign_add(*args, **kwargs)
    return F.tensor_from_tf(result)

def assign_sub(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.assign_sub(*args, **kwargs)
    return F.tensor_from_tf(result)

def atan(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.atan(*args, **kwargs)
    return F.tensor_from_tf(result)

def atan2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.atan2(*args, **kwargs)
    return F.tensor_from_tf(result)

def atanh(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.atanh(*args, **kwargs)
    return F.tensor_from_tf(result)

def batch_matrix_band_part(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.batch_matrix_band_part(*args, **kwargs)
    return F.tensor_from_tf(result)

def batch_matrix_diag(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.batch_matrix_diag(*args, **kwargs)
    return F.tensor_from_tf(result)

def batch_matrix_diag_part(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.batch_matrix_diag_part(*args, **kwargs)
    return F.tensor_from_tf(result)

def batch_matrix_set_diag(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.batch_matrix_set_diag(*args, **kwargs)
    return F.tensor_from_tf(result)

def batch_to_space(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.batch_to_space(*args, **kwargs)
    return F.tensor_from_tf(result)

def batch_to_space_nd(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.batch_to_space_nd(*args, **kwargs)
    return F.tensor_from_tf(result)

def betainc(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.betainc(*args, **kwargs)
    return F.tensor_from_tf(result)

def bincount(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.bincount(*args, **kwargs)
    return F.tensor_from_tf(result)

def bitcast(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.bitcast(*args, **kwargs)
    return F.tensor_from_tf(result)

def boolean_mask(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.boolean_mask(*args, **kwargs)
    return F.tensor_from_tf(result)

def broadcast_dynamic_shape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.broadcast_dynamic_shape(*args, **kwargs)
    return F.tensor_from_tf(result)

def broadcast_static_shape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.broadcast_static_shape(*args, **kwargs)
    return F.tensor_from_tf(result)

def case(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.case(*args, **kwargs)
    return F.tensor_from_tf(result)

def cast(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cast(*args, **kwargs)
    return F.tensor_from_tf(result)

def ceil(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.ceil(*args, **kwargs)
    return F.tensor_from_tf(result)

def check_numerics(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.check_numerics(*args, **kwargs)
    return F.tensor_from_tf(result)

def cholesky(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cholesky(*args, **kwargs)
    return F.tensor_from_tf(result)

def cholesky_solve(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cholesky_solve(*args, **kwargs)
    return F.tensor_from_tf(result)

def clip_by_average_norm(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.clip_by_average_norm(*args, **kwargs)
    return F.tensor_from_tf(result)

def clip_by_global_norm(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.clip_by_global_norm(*args, **kwargs)
    return F.tensor_from_tf(result)

def clip_by_norm(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.clip_by_norm(*args, **kwargs)
    return F.tensor_from_tf(result)

def clip_by_value(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.clip_by_value(*args, **kwargs)
    return F.tensor_from_tf(result)

def complex(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.complex(*args, **kwargs)
    return F.tensor_from_tf(result)

def concat(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.concat(*args, **kwargs)
    return F.tensor_from_tf(result)

def cond(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cond(*args, **kwargs)
    return F.tensor_from_tf(result)

def confusion_matrix(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.confusion_matrix(*args, **kwargs)
    return F.tensor_from_tf(result)

def conj(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.conj(*args, **kwargs)
    return F.tensor_from_tf(result)

def constant(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.constant(*args, **kwargs)
    return F.tensor_from_tf(result)

def constant_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.constant_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def cos(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cos(*args, **kwargs)
    return F.tensor_from_tf(result)

def cosh(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cosh(*args, **kwargs)
    return F.tensor_from_tf(result)

def count_nonzero(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.count_nonzero(*args, **kwargs)
    return F.tensor_from_tf(result)

def count_up_to(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.count_up_to(*args, **kwargs)
    return F.tensor_from_tf(result)

def create_partitioned_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.create_partitioned_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def cross(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cross(*args, **kwargs)
    return F.tensor_from_tf(result)

def cumprod(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cumprod(*args, **kwargs)
    return F.tensor_from_tf(result)

def cumsum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.cumsum(*args, **kwargs)
    return F.tensor_from_tf(result)

def decode_base64(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.decode_base64(*args, **kwargs)
    return F.tensor_from_tf(result)

def decode_csv(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.decode_csv(*args, **kwargs)
    return F.tensor_from_tf(result)

def decode_json_example(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.decode_json_example(*args, **kwargs)
    return F.tensor_from_tf(result)

def decode_raw(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.decode_raw(*args, **kwargs)
    return F.tensor_from_tf(result)

def delete_session_tensor(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.delete_session_tensor(*args, **kwargs)
    return F.tensor_from_tf(result)

def depth_to_space(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.depth_to_space(*args, **kwargs)
    return F.tensor_from_tf(result)

def dequantize(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.dequantize(*args, **kwargs)
    return F.tensor_from_tf(result)

def deserialize_many_sparse(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.deserialize_many_sparse(*args, **kwargs)
    return F.tensor_from_tf(result)

def diag(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.diag(*args, **kwargs)
    return F.tensor_from_tf(result)

def diag_part(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.diag_part(*args, **kwargs)
    return F.tensor_from_tf(result)

def digamma(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.digamma(*args, **kwargs)
    return F.tensor_from_tf(result)

def div(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.div(*args, **kwargs)
    return F.tensor_from_tf(result)

def divide(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.divide(*args, **kwargs)
    return F.tensor_from_tf(result)

def dynamic_partition(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.dynamic_partition(*args, **kwargs)
    return F.tensor_from_tf(result)

def dynamic_stitch(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.dynamic_stitch(*args, **kwargs)
    return F.tensor_from_tf(result)

def edit_distance(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.edit_distance(*args, **kwargs)
    return F.tensor_from_tf(result)

def einsum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.einsum(*args, **kwargs)
    return F.tensor_from_tf(result)

def encode_base64(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.encode_base64(*args, **kwargs)
    return F.tensor_from_tf(result)

def equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def erf(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.erf(*args, **kwargs)
    return F.tensor_from_tf(result)

def erfc(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.erfc(*args, **kwargs)
    return F.tensor_from_tf(result)

def exp(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.exp(*args, **kwargs)
    return F.tensor_from_tf(result)

def expand_dims(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.expand_dims(*args, **kwargs)
    return F.tensor_from_tf(result)

def expm1(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.expm1(*args, **kwargs)
    return F.tensor_from_tf(result)

def extract_image_patches(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.extract_image_patches(*args, **kwargs)
    return F.tensor_from_tf(result)

def eye(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.eye(*args, **kwargs)
    return F.tensor_from_tf(result)

def fake_quant_with_min_max_args(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fake_quant_with_min_max_args(*args, **kwargs)
    return F.tensor_from_tf(result)

def fake_quant_with_min_max_args_gradient(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fake_quant_with_min_max_args_gradient(*args, **kwargs)
    return F.tensor_from_tf(result)

def fake_quant_with_min_max_vars(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fake_quant_with_min_max_vars(*args, **kwargs)
    return F.tensor_from_tf(result)

def fake_quant_with_min_max_vars_gradient(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fake_quant_with_min_max_vars_gradient(*args, **kwargs)
    return F.tensor_from_tf(result)

def fake_quant_with_min_max_vars_per_channel(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fake_quant_with_min_max_vars_per_channel(*args, **kwargs)
    return F.tensor_from_tf(result)

def fake_quant_with_min_max_vars_per_channel_gradient(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fake_quant_with_min_max_vars_per_channel_gradient(*args, **kwargs)
    return F.tensor_from_tf(result)

def fft(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fft(*args, **kwargs)
    return F.tensor_from_tf(result)

def fft2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fft2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def fft3d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fft3d(*args, **kwargs)
    return F.tensor_from_tf(result)

def fill(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fill(*args, **kwargs)
    return F.tensor_from_tf(result)

def fixed_size_partitioner(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.fixed_size_partitioner(*args, **kwargs)
    return F.tensor_from_tf(result)

def floor(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.floor(*args, **kwargs)
    return F.tensor_from_tf(result)

def floor_div(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.floor_div(*args, **kwargs)
    return F.tensor_from_tf(result)

def floordiv(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.floordiv(*args, **kwargs)
    return F.tensor_from_tf(result)

def floormod(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.floormod(*args, **kwargs)
    return F.tensor_from_tf(result)

def foldl(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.foldl(*args, **kwargs)
    return F.tensor_from_tf(result)

def foldr(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.foldr(*args, **kwargs)
    return F.tensor_from_tf(result)

def gather(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.gather(*args, **kwargs)
    return F.tensor_from_tf(result)

def gather_nd(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.gather_nd(*args, **kwargs)
    return F.tensor_from_tf(result)

def get_local_variable(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.get_local_variable(*args, **kwargs)
    return F.tensor_from_tf(result)

def get_session_handle(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.get_session_handle(*args, **kwargs)
    return F.tensor_from_tf(result)

def get_session_tensor(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.get_session_tensor(*args, **kwargs)
    return F.tensor_from_tf(result)

def get_summary_op(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.get_summary_op(*args, **kwargs)
    return F.tensor_from_tf(result)

def get_variable(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.get_variable(*args, **kwargs)
    return F.tensor_from_tf(result)

def get_variable_scope(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.get_variable_scope(*args, **kwargs)
    return F.tensor_from_tf(result)

def global_norm(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.global_norm(*args, **kwargs)
    return F.tensor_from_tf(result)

def global_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.global_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def global_variables_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.global_variables_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def glorot_normal_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.glorot_normal_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def glorot_uniform_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.glorot_uniform_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def gradients(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.gradients(*args, **kwargs)
    return F.tensor_from_tf(result)

def greater(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.greater(*args, **kwargs)
    return F.tensor_from_tf(result)

def greater_equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.greater_equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def group(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.group(*args, **kwargs)
    return F.tensor_from_tf(result)

def hessians(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.hessians(*args, **kwargs)
    return F.tensor_from_tf(result)

def histogram_fixed_width(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.histogram_fixed_width(*args, **kwargs)
    return F.tensor_from_tf(result)

def identity(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.identity(*args, **kwargs)
    return F.tensor_from_tf(result)

def identity_n(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.identity_n(*args, **kwargs)
    return F.tensor_from_tf(result)

def ifft(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.ifft(*args, **kwargs)
    return F.tensor_from_tf(result)

def ifft2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.ifft2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def ifft3d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.ifft3d(*args, **kwargs)
    return F.tensor_from_tf(result)

def igamma(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.igamma(*args, **kwargs)
    return F.tensor_from_tf(result)

def igammac(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.igammac(*args, **kwargs)
    return F.tensor_from_tf(result)

def imag(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.imag(*args, **kwargs)
    return F.tensor_from_tf(result)

def immutable_const(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.immutable_const(*args, **kwargs)
    return F.tensor_from_tf(result)

def initialize_all_tables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.initialize_all_tables(*args, **kwargs)
    return F.tensor_from_tf(result)

def initialize_all_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.initialize_all_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def initialize_local_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.initialize_local_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def initialize_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.initialize_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def invert_permutation(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.invert_permutation(*args, **kwargs)
    return F.tensor_from_tf(result)

def is_finite(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.is_finite(*args, **kwargs)
    return F.tensor_from_tf(result)

def is_inf(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.is_inf(*args, **kwargs)
    return F.tensor_from_tf(result)

def is_nan(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.is_nan(*args, **kwargs)
    return F.tensor_from_tf(result)

def is_non_decreasing(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.is_non_decreasing(*args, **kwargs)
    return F.tensor_from_tf(result)

def is_numeric_tensor(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.is_numeric_tensor(*args, **kwargs)
    return F.tensor_from_tf(result)

def is_strictly_increasing(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.is_strictly_increasing(*args, **kwargs)
    return F.tensor_from_tf(result)

def is_variable_initialized(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.is_variable_initialized(*args, **kwargs)
    return F.tensor_from_tf(result)

def lbeta(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.lbeta(*args, **kwargs)
    return F.tensor_from_tf(result)

def less(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.less(*args, **kwargs)
    return F.tensor_from_tf(result)

def less_equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.less_equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def lgamma(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.lgamma(*args, **kwargs)
    return F.tensor_from_tf(result)

def lin_space(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.lin_space(*args, **kwargs)
    return F.tensor_from_tf(result)

def linspace(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.linspace(*args, **kwargs)
    return F.tensor_from_tf(result)

def local_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.local_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def local_variables_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.local_variables_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def log(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.log(*args, **kwargs)
    return F.tensor_from_tf(result)

def log1p(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.log1p(*args, **kwargs)
    return F.tensor_from_tf(result)

def log_sigmoid(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.log_sigmoid(*args, **kwargs)
    return F.tensor_from_tf(result)

def logical_and(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.logical_and(*args, **kwargs)
    return F.tensor_from_tf(result)

def logical_not(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.logical_not(*args, **kwargs)
    return F.tensor_from_tf(result)

def logical_or(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.logical_or(*args, **kwargs)
    return F.tensor_from_tf(result)

def logical_xor(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.logical_xor(*args, **kwargs)
    return F.tensor_from_tf(result)

def make_template(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.make_template(*args, **kwargs)
    return F.tensor_from_tf(result)

def map_fn(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.map_fn(*args, **kwargs)
    return F.tensor_from_tf(result)

def matching_files(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matching_files(*args, **kwargs)
    return F.tensor_from_tf(result)

def matmul(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matmul(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_band_part(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_band_part(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_determinant(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_determinant(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_diag(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_diag(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_diag_part(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_diag_part(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_inverse(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_inverse(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_set_diag(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_set_diag(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_solve(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_solve(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_solve_ls(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_solve_ls(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_transpose(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_transpose(*args, **kwargs)
    return F.tensor_from_tf(result)

def matrix_triangular_solve(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.matrix_triangular_solve(*args, **kwargs)
    return F.tensor_from_tf(result)

def maximum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.maximum(*args, **kwargs)
    return F.tensor_from_tf(result)

def meshgrid(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.meshgrid(*args, **kwargs)
    return F.tensor_from_tf(result)

def min_max_variable_partitioner(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.min_max_variable_partitioner(*args, **kwargs)
    return F.tensor_from_tf(result)

def minimum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.minimum(*args, **kwargs)
    return F.tensor_from_tf(result)

def mod(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.mod(*args, **kwargs)
    return F.tensor_from_tf(result)

def model_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.model_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def moving_average_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.moving_average_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def multinomial(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.multinomial(*args, **kwargs)
    return F.tensor_from_tf(result)

def multiply(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.multiply(*args, **kwargs)
    return F.tensor_from_tf(result)

def negative(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.negative(*args, **kwargs)
    return F.tensor_from_tf(result)

def nest(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.nest(*args, **kwargs)
    return F.tensor_from_tf(result)

def newaxis(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.newaxis(*args, **kwargs)
    return F.tensor_from_tf(result)

def no_op(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.no_op(*args, **kwargs)
    return F.tensor_from_tf(result)

def no_regularizer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.no_regularizer(*args, **kwargs)
    return F.tensor_from_tf(result)

def norm(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.norm(*args, **kwargs)
    return F.tensor_from_tf(result)

def not_equal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.not_equal(*args, **kwargs)
    return F.tensor_from_tf(result)

def one_hot(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.one_hot(*args, **kwargs)
    return F.tensor_from_tf(result)

def ones(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.ones(*args, **kwargs)
    return F.tensor_from_tf(result)

def ones_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.ones_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def ones_like(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.ones_like(*args, **kwargs)
    return F.tensor_from_tf(result)

def orthogonal_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.orthogonal_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def pad(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.pad(*args, **kwargs)
    return F.tensor_from_tf(result)

def parallel_stack(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.parallel_stack(*args, **kwargs)
    return F.tensor_from_tf(result)

def parse_example(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.parse_example(*args, **kwargs)
    return F.tensor_from_tf(result)

def parse_single_example(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.parse_single_example(*args, **kwargs)
    return F.tensor_from_tf(result)

def parse_single_sequence_example(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.parse_single_sequence_example(*args, **kwargs)
    return F.tensor_from_tf(result)

def parse_tensor(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.parse_tensor(*args, **kwargs)
    return F.tensor_from_tf(result)

def placeholder(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.placeholder(*args, **kwargs)
    return F.tensor_from_tf(result)

def placeholder_with_default(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.placeholder_with_default(*args, **kwargs)
    return F.tensor_from_tf(result)

def polygamma(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.polygamma(*args, **kwargs)
    return F.tensor_from_tf(result)

def pow(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.pow(*args, **kwargs)
    return F.tensor_from_tf(result)

def py_func(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.py_func(*args, **kwargs)
    return F.tensor_from_tf(result)

def qr(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.qr(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantize_and_dequantize(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.quantize_and_dequantize(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantize_v2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.quantize_v2(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_concat(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.quantized_concat(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_crop(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_crop(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_gamma(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_gamma(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_normal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_normal(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_normal_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_normal_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_poisson(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_poisson(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_shuffle(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_shuffle(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_uniform(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_uniform(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_uniform_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.random_uniform_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def range(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.range(*args, **kwargs)
    return F.tensor_from_tf(result)

def rank(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.rank(*args, **kwargs)
    return F.tensor_from_tf(result)

def read_file(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.read_file(*args, **kwargs)
    return F.tensor_from_tf(result)

def real(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.real(*args, **kwargs)
    return F.tensor_from_tf(result)

def realdiv(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.realdiv(*args, **kwargs)
    return F.tensor_from_tf(result)

def reciprocal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reciprocal(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_all(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_all(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_any(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_any(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_join(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_join(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_logsumexp(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_logsumexp(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_max(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_max(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_mean(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_mean(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_min(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_min(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_prod(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_prod(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduce_sum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduce_sum(*args, **kwargs)
    return F.tensor_from_tf(result)

def reduced_shape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reduced_shape(*args, **kwargs)
    return F.tensor_from_tf(result)

def report_uninitialized_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.report_uninitialized_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def required_space_to_batch_paddings(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.required_space_to_batch_paddings(*args, **kwargs)
    return F.tensor_from_tf(result)

def reshape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reshape(*args, **kwargs)
    return F.tensor_from_tf(result)

def reverse(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reverse(*args, **kwargs)
    return F.tensor_from_tf(result)

def reverse_sequence(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reverse_sequence(*args, **kwargs)
    return F.tensor_from_tf(result)

def reverse_v2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.reverse_v2(*args, **kwargs)
    return F.tensor_from_tf(result)

def rint(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.rint(*args, **kwargs)
    return F.tensor_from_tf(result)

def round(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.round(*args, **kwargs)
    return F.tensor_from_tf(result)

def rsqrt(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.rsqrt(*args, **kwargs)
    return F.tensor_from_tf(result)

def saturate_cast(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.saturate_cast(*args, **kwargs)
    return F.tensor_from_tf(result)

def scalar_mul(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scalar_mul(*args, **kwargs)
    return F.tensor_from_tf(result)

def scan(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scan(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_add(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_add(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_div(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_div(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_mul(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_mul(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_nd(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_nd(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_nd_add(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_nd_add(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_nd_sub(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_nd_sub(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_nd_update(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_nd_update(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_sub(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_sub(*args, **kwargs)
    return F.tensor_from_tf(result)

def scatter_update(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.scatter_update(*args, **kwargs)
    return F.tensor_from_tf(result)

def segment_max(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.segment_max(*args, **kwargs)
    return F.tensor_from_tf(result)

def segment_mean(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.segment_mean(*args, **kwargs)
    return F.tensor_from_tf(result)

def segment_min(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.segment_min(*args, **kwargs)
    return F.tensor_from_tf(result)

def segment_prod(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.segment_prod(*args, **kwargs)
    return F.tensor_from_tf(result)

def segment_sum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.segment_sum(*args, **kwargs)
    return F.tensor_from_tf(result)

def self_adjoint_eig(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.self_adjoint_eig(*args, **kwargs)
    return F.tensor_from_tf(result)

def self_adjoint_eigvals(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.self_adjoint_eigvals(*args, **kwargs)
    return F.tensor_from_tf(result)

def sequence_mask(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sequence_mask(*args, **kwargs)
    return F.tensor_from_tf(result)

def serialize_many_sparse(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.serialize_many_sparse(*args, **kwargs)
    return F.tensor_from_tf(result)

def serialize_sparse(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.serialize_sparse(*args, **kwargs)
    return F.tensor_from_tf(result)

def serialize_tensor(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.serialize_tensor(*args, **kwargs)
    return F.tensor_from_tf(result)

def setdiff1d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.setdiff1d(*args, **kwargs)
    return F.tensor_from_tf(result)

def shape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.shape(*args, **kwargs)
    return F.tensor_from_tf(result)

def shape_n(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.shape_n(*args, **kwargs)
    return F.tensor_from_tf(result)

def sigmoid(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sigmoid(*args, **kwargs)
    return F.tensor_from_tf(result)

def sign(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sign(*args, **kwargs)
    return F.tensor_from_tf(result)

def sin(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sin(*args, **kwargs)
    return F.tensor_from_tf(result)

def sinh(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sinh(*args, **kwargs)
    return F.tensor_from_tf(result)

def size(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.size(*args, **kwargs)
    return F.tensor_from_tf(result)

def slice(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.slice(*args, **kwargs)
    return F.tensor_from_tf(result)

def space_to_batch(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.space_to_batch(*args, **kwargs)
    return F.tensor_from_tf(result)

def space_to_batch_nd(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.space_to_batch_nd(*args, **kwargs)
    return F.tensor_from_tf(result)

def space_to_depth(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.space_to_depth(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_add(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_add(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_concat(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_concat(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_fill_empty_rows(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_fill_empty_rows(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_mask(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_mask(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_matmul(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_matmul(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_maximum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_maximum(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_merge(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_merge(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_minimum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_minimum(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_placeholder(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_placeholder(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_reduce_max(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_reduce_max(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_reduce_max_sparse(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_reduce_max_sparse(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_reduce_sum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_reduce_sum(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_reduce_sum_sparse(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_reduce_sum_sparse(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_reorder(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_reorder(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_reset_shape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_reset_shape(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_reshape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_reshape(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_retain(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_retain(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_segment_mean(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_segment_mean(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_segment_mean_grad(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_segment_mean_grad(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_segment_sqrt_n(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_segment_sqrt_n(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_segment_sqrt_n_grad(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_segment_sqrt_n_grad(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_segment_sum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_segment_sum(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_slice(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_slice(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_softmax(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_softmax(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_split(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_split(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_tensor_dense_matmul(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_tensor_dense_matmul(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_tensor_to_dense(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_tensor_to_dense(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_to_dense(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_to_dense(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_to_indicator(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_to_indicator(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_transpose(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sparse_transpose(*args, **kwargs)
    return F.tensor_from_tf(result)

def split(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.split(*args, **kwargs)
    return F.tensor_from_tf(result)

def sqrt(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.sqrt(*args, **kwargs)
    return F.tensor_from_tf(result)

def square(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.square(*args, **kwargs)
    return F.tensor_from_tf(result)

def squared_difference(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.squared_difference(*args, **kwargs)
    return F.tensor_from_tf(result)

def squeeze(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.squeeze(*args, **kwargs)
    return F.tensor_from_tf(result)

def stack(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.stack(*args, **kwargs)
    return F.tensor_from_tf(result)

def stop_gradient(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.stop_gradient(*args, **kwargs)
    return F.tensor_from_tf(result)

def strided_slice(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.strided_slice(*args, **kwargs)
    return F.tensor_from_tf(result)

def string_join(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.string_join(*args, **kwargs)
    return F.tensor_from_tf(result)

def string_split(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.string_split(*args, **kwargs)
    return F.tensor_from_tf(result)

def string_to_hash_bucket(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.string_to_hash_bucket(*args, **kwargs)
    return F.tensor_from_tf(result)

def string_to_hash_bucket_fast(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.string_to_hash_bucket_fast(*args, **kwargs)
    return F.tensor_from_tf(result)

def string_to_hash_bucket_strong(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.string_to_hash_bucket_strong(*args, **kwargs)
    return F.tensor_from_tf(result)

def string_to_number(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.string_to_number(*args, **kwargs)
    return F.tensor_from_tf(result)

def substr(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.substr(*args, **kwargs)
    return F.tensor_from_tf(result)

def subtract(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.subtract(*args, **kwargs)
    return F.tensor_from_tf(result)

def svd(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.svd(*args, **kwargs)
    return F.tensor_from_tf(result)

def tables_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.tables_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def tan(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.tan(*args, **kwargs)
    return F.tensor_from_tf(result)

def tanh(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.tanh(*args, **kwargs)
    return F.tensor_from_tf(result)

def tensordot(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.tensordot(*args, **kwargs)
    return F.tensor_from_tf(result)

def tile(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.tile(*args, **kwargs)
    return F.tensor_from_tf(result)

def to_bfloat16(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.to_bfloat16(*args, **kwargs)
    return F.tensor_from_tf(result)

def to_double(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.to_double(*args, **kwargs)
    return F.tensor_from_tf(result)

def to_float(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.to_float(*args, **kwargs)
    return F.tensor_from_tf(result)

def to_int32(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.to_int32(*args, **kwargs)
    return F.tensor_from_tf(result)

def to_int64(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.to_int64(*args, **kwargs)
    return F.tensor_from_tf(result)

def trace(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.trace(*args, **kwargs)
    return F.tensor_from_tf(result)

def trainable_variables(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.trainable_variables(*args, **kwargs)
    return F.tensor_from_tf(result)

def transpose(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.transpose(*args, **kwargs)
    return F.tensor_from_tf(result)

def truediv(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.truediv(*args, **kwargs)
    return F.tensor_from_tf(result)

def truncated_normal(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.truncated_normal(*args, **kwargs)
    return F.tensor_from_tf(result)

def truncated_normal_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.truncated_normal_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def truncatediv(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.truncatediv(*args, **kwargs)
    return F.tensor_from_tf(result)

def truncatemod(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.truncatemod(*args, **kwargs)
    return F.tensor_from_tf(result)

def tuple(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.tuple(*args, **kwargs)
    return F.tensor_from_tf(result)

def uniform_unit_scaling_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.uniform_unit_scaling_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def unique(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.unique(*args, **kwargs)
    return F.tensor_from_tf(result)

def unique_with_counts(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.unique_with_counts(*args, **kwargs)
    return F.tensor_from_tf(result)

def unsorted_segment_max(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.unsorted_segment_max(*args, **kwargs)
    return F.tensor_from_tf(result)

def unsorted_segment_sum(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.unsorted_segment_sum(*args, **kwargs)
    return F.tensor_from_tf(result)

def unstack(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.unstack(*args, **kwargs)
    return F.tensor_from_tf(result)

def variable_axis_size_partitioner(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.variable_axis_size_partitioner(*args, **kwargs)
    return F.tensor_from_tf(result)

def variable_op_scope(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.variable_op_scope(*args, **kwargs)
    return F.tensor_from_tf(result)

def variable_scope(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.variable_scope(*args, **kwargs)
    return F.tensor_from_tf(result)

def variables_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.variables_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def variance_scaling_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.variance_scaling_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def verify_tensor_all_finite(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.verify_tensor_all_finite(*args, **kwargs)
    return F.tensor_from_tf(result)

def where(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.where(*args, **kwargs)
    return F.tensor_from_tf(result)

def while_loop(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.while_loop(*args, **kwargs)
    return F.tensor_from_tf(result)

def write_file(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.write_file(*args, **kwargs)
    return F.tensor_from_tf(result)

def zeros(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.zeros(*args, **kwargs)
    return F.tensor_from_tf(result)

def zeros_initializer(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.zeros_initializer(*args, **kwargs)
    return F.tensor_from_tf(result)

def zeros_like(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.zeros_like(*args, **kwargs)
    return F.tensor_from_tf(result)

def zeta(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = standard_ops.zeta(*args, **kwargs)
    return F.tensor_from_tf(result)

def absolute_import(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.absolute_import(*args, **kwargs)
    return F.tensor_from_tf(result)

def array_ops(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.array_ops(*args, **kwargs)
    return F.tensor_from_tf(result)

def atrous_conv2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.atrous_conv2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def atrous_conv2d_transpose(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.atrous_conv2d_transpose(*args, **kwargs)
    return F.tensor_from_tf(result)

def avg_pool(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.avg_pool(*args, **kwargs)
    return F.tensor_from_tf(result)

def avg_pool3d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.avg_pool3d(*args, **kwargs)
    return F.tensor_from_tf(result)

def bias_add(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.bias_add(*args, **kwargs)
    return F.tensor_from_tf(result)

def bias_add_grad(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.bias_add_grad(*args, **kwargs)
    return F.tensor_from_tf(result)

def bias_add_v1(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.bias_add_v1(*args, **kwargs)
    return F.tensor_from_tf(result)

def context(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.context(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv1d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv1d(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv2d_backprop_filter(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv2d_backprop_filter(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv2d_backprop_input(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv2d_backprop_input(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv2d_transpose(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv2d_transpose(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv3d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv3d(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv3d_backprop_filter(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv3d_backprop_filter(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv3d_backprop_filter_v2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv3d_backprop_filter_v2(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv3d_backprop_input(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv3d_backprop_input(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv3d_backprop_input_v2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv3d_backprop_input_v2(*args, **kwargs)
    return F.tensor_from_tf(result)

def conv3d_transpose(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.conv3d_transpose(*args, **kwargs)
    return F.tensor_from_tf(result)

def convolution(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.convolution(*args, **kwargs)
    return F.tensor_from_tf(result)

def crelu(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.crelu(*args, **kwargs)
    return F.tensor_from_tf(result)

def depthwise_conv2d_native(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.depthwise_conv2d_native(*args, **kwargs)
    return F.tensor_from_tf(result)

def depthwise_conv2d_native_backprop_filter(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.depthwise_conv2d_native_backprop_filter(*args, **kwargs)
    return F.tensor_from_tf(result)

def depthwise_conv2d_native_backprop_input(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.depthwise_conv2d_native_backprop_input(*args, **kwargs)
    return F.tensor_from_tf(result)

def dilation2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.dilation2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def dilation2d_backprop_filter(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.dilation2d_backprop_filter(*args, **kwargs)
    return F.tensor_from_tf(result)

def dilation2d_backprop_input(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.dilation2d_backprop_input(*args, **kwargs)
    return F.tensor_from_tf(result)

def division(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.division(*args, **kwargs)
    return F.tensor_from_tf(result)

def dropout(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.dropout(*args, **kwargs)
    return F.tensor_from_tf(result)

def dtypes(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.dtypes(*args, **kwargs)
    return F.tensor_from_tf(result)

def elu(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.elu(*args, **kwargs)
    return F.tensor_from_tf(result)

def erosion2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.erosion2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def fractional_avg_pool(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.fractional_avg_pool(*args, **kwargs)
    return F.tensor_from_tf(result)

def fractional_max_pool(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.fractional_max_pool(*args, **kwargs)
    return F.tensor_from_tf(result)

def fused_batch_norm_grad(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.fused_batch_norm_grad(*args, **kwargs)
    return F.tensor_from_tf(result)

def fused_batch_norm_grad_v2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.fused_batch_norm_grad_v2(*args, **kwargs)
    return F.tensor_from_tf(result)

def fused_pad_conv2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.fused_pad_conv2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def fused_resize_and_pad_conv2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.fused_resize_and_pad_conv2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def gen_nn_ops(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.gen_nn_ops(*args, **kwargs)
    return F.tensor_from_tf(result)

def graph_util(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.graph_util(*args, **kwargs)
    return F.tensor_from_tf(result)

def in_top_k(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.in_top_k(*args, **kwargs)
    return F.tensor_from_tf(result)

def l2_loss(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.l2_loss(*args, **kwargs)
    return F.tensor_from_tf(result)

def leaky_relu(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.leaky_relu(*args, **kwargs)
    return F.tensor_from_tf(result)

def local_response_normalization(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.local_response_normalization(*args, **kwargs)
    return F.tensor_from_tf(result)

def log_softmax(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.log_softmax(*args, **kwargs)
    return F.tensor_from_tf(result)

def lrn(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.lrn(*args, **kwargs)
    return F.tensor_from_tf(result)

def math_ops(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.math_ops(*args, **kwargs)
    return F.tensor_from_tf(result)

def max_pool(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.max_pool(*args, **kwargs)
    return F.tensor_from_tf(result)

def max_pool3d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.max_pool3d(*args, **kwargs)
    return F.tensor_from_tf(result)

def max_pool_grad_grad_v2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.max_pool_grad_grad_v2(*args, **kwargs)
    return F.tensor_from_tf(result)

def max_pool_grad_v2(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.max_pool_grad_v2(*args, **kwargs)
    return F.tensor_from_tf(result)

def max_pool_with_argmax(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.max_pool_with_argmax(*args, **kwargs)
    return F.tensor_from_tf(result)

def np(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.np(*args, **kwargs)
    return F.tensor_from_tf(result)

def numbers(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.numbers(*args, **kwargs)
    return F.tensor_from_tf(result)

def ops(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.ops(*args, **kwargs)
    return F.tensor_from_tf(result)

def pool(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.pool(*args, **kwargs)
    return F.tensor_from_tf(result)

def print_function(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.print_function(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_avg_pool(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_avg_pool(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_batch_norm_with_global_normalization(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_batch_norm_with_global_normalization(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_bias_add(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_bias_add(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_conv2d(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_conv2d(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_max_pool(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_max_pool(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_relu(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_relu(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_relu6(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_relu6(*args, **kwargs)
    return F.tensor_from_tf(result)

def quantized_relu_x(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.quantized_relu_x(*args, **kwargs)
    return F.tensor_from_tf(result)

def random_ops(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.random_ops(*args, **kwargs)
    return F.tensor_from_tf(result)

def relu(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.relu(*args, **kwargs)
    return F.tensor_from_tf(result)

def relu6(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.relu6(*args, **kwargs)
    return F.tensor_from_tf(result)

def selu(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.selu(*args, **kwargs)
    return F.tensor_from_tf(result)

def softmax(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.softmax(*args, **kwargs)
    return F.tensor_from_tf(result)

def softmax_cross_entropy_with_logits(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.softmax_cross_entropy_with_logits(*args, **kwargs)
    return F.tensor_from_tf(result)

def softplus(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.softplus(*args, **kwargs)
    return F.tensor_from_tf(result)

def softsign(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.softsign(*args, **kwargs)
    return F.tensor_from_tf(result)

def sparse_softmax_cross_entropy_with_logits(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.sparse_softmax_cross_entropy_with_logits(*args, **kwargs)
    return F.tensor_from_tf(result)

def tensor_shape(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.tensor_shape(*args, **kwargs)
    return F.tensor_from_tf(result)

def tensor_util(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.tensor_util(*args, **kwargs)
    return F.tensor_from_tf(result)

def top_k(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.top_k(*args, **kwargs)
    return F.tensor_from_tf(result)

def with_space_to_batch(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.with_space_to_batch(*args, **kwargs)
    return F.tensor_from_tf(result)

def xw_plus_b(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.xw_plus_b(*args, **kwargs)
    return F.tensor_from_tf(result)

def xw_plus_b_v1(*args, **kwargs):
    args = F.tensor_to_tf(args)
    kwargs = F.tensor_to_tf(kwargs)
    result = nn_ops.xw_plus_b_v1(*args, **kwargs)
    return F.tensor_from_tf(result)

